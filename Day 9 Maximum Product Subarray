Given an array arr[] that contains positive and negative integers (may contain 0 as well). Find the maximum product that we can get in a subarray of arr[].

Note: It is guaranteed that the output fits in a 32-bit integer.

class Solution {
  public:
    // Function to find maximum product subarray
    int maxProduct(vector<int> &arr) {
        // Your Code Here
        int n = arr.size();
    if (n == 0) return 0;

    
    int maxProd = arr[0];  
      int maxEndingHere = arr[0];
       int minEndingHere = arr[0]; 

    for (int i = 1; i < n; ++i) {
        if (arr[i] < 0)
         swap(maxEndingHere, minEndingHere);
        
        maxEndingHere = max(arr[i], arr[i] * maxEndingHere);
         minEndingHere = min(arr[i], arr[i] * minEndingHere);
          maxProd = max(maxProd, maxEndingHere);
    }

    return maxProd;
    }
};
