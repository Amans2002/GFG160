Given an array arr[] denoting heights of N towers and a positive integer K.

For each tower, you must perform exactly one of the following operations exactly once.

Increase the height of the tower by K
Decrease the height of the tower by K
Find out the minimum possible difference between the height of the shortest and tallest towers after you have modified each tower.

You can find a slight modification of the problem here.
Note: It is compulsory to increase or decrease the height by K for each tower. After the operation, the resultant array should not contain any negative integers.

class Solution {
  public:
    int getMinDiff(vector<int> &arr, int k) {
        // code here
        int n = arr.size();
    if (n == 1) return 0; 
    
    sort(arr.begin(), arr.end());
    

    int initial_diff = arr[n-1] - arr[0];
    
    
    int min_diff = initial_diff;
    

    for (int i = 0; i < n - 1; i++) {
        int max_height = max(arr[i] + k, arr[n-1] - k);
        int min_height = min(arr[0] + k, arr[i+1] - k);
        
        
        if (min_height >= 0) { 
            min_diff = min(min_diff, max_height - min_height);
        }
    }
    
    return min_diff;


    }
};
